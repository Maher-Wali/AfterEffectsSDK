name: Build Cross-Platform Plugin

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Verify Rez tool
      run: |
        if ! command -v Rez; then
          echo "❌ Rez tool not found! Installing Xcode command-line tools..."
          xcode-select --install || true  # Ignore if already installed
          echo "❌ Rez still not found after attempting install"
          exit 1
        else
          echo "✅ Rez tool found at: $(command -v Rez)"
        fi

    - name: Create Info.plist template
      run: |
        mkdir -p Examples/AEGP/Panelator
        cat > Examples/AEGP/Panelator/Info.plist.in << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleDevelopmentRegion</key>
            <string>en</string>
            <key>CFBundleExecutable</key>
            <string>${MACOSX_BUNDLE_EXECUTABLE_NAME}</string>
            <key>CFBundleIdentifier</key>
            <string>${MACOSX_BUNDLE_IDENTIFIER}</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundleName</key>
            <string>${MACOSX_BUNDLE_BUNDLE_NAME}</string>
            <key>CFBundlePackageType</key>
            <string>BNDL</string>
            <key>CFBundleShortVersionString</key>
            <string>${MACOSX_BUNDLE_SHORT_VERSION_STRING}</string>
            <key>CFBundleVersion</key>
            <string>${MACOSX_BUNDLE_BUNDLE_VERSION}</string>
            <key>CSResourcesFileMapped</key>
            <true/>
            <key>LSMinimumSystemVersion</key>
            <string>12.0</string>
        </dict>
        </plist>
        EOF

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..

    - name: Debug PiPL resource
      run: |
        echo "Checking for AEPathLink.r, AEConfig.h, and AE_General.r:"
        find Examples/AEGP/Panelator -name "AEPathLink.r" -ls
        find Examples/Headers -name "AEConfig.h" -ls
        find Examples/Resources -name "AE_General.r" -ls
        if [ -f "Examples/AEGP/Panelator/Win/AEPathLink.r" ] && [ -f "Examples/Headers/AEConfig.h" ] && [ -f "Examples/Resources/AE_General.r" ]; then
          echo "Contents of AEPathLink.r:"
          cat Examples/AEGP/Panelator/Win/AEPathLink.r
          echo "Contents of AE_General.r (first 20 lines):"
          cat Examples/Resources/AE_General.r | head -n 20
          echo "Attempting to run Rez manually:"
          Rez -useDF -d DEBUG=1 -i Examples/Headers -i Examples/Resources -i /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/ Examples/AEGP/Panelator/Win/AEPathLink.r -o build/AEPathLink.rsrc > build/rez_stdout.log 2> build/rez_stderr.log
          if [ $? -eq 0 ] && [ -s build/AEPathLink.rsrc ]; then
            echo "✅ Rez succeeded, AEPathLink.rsrc created:"
            ls -l build/AEPathLink.rsrc
            echo "Rez stdout:"
            cat build/rez_stdout.log
            echo "Rez stderr (if any):"
            cat build/rez_stderr.log
            echo "Attempting DeRez (non-critical):"
            DeRez build/AEPathLink.rsrc > build/derez_output.log 2> build/derez_error.log || {
              echo "⚠️ DeRez failed (continuing)"
              cat build/derez_error.log
              xxd build/AEPathLink.rsrc | head -20
            }
            if [ -f build/derez_output.log ]; then
              echo "DeRez output (if any):"
              cat build/derez_output.log
            fi
          else
            echo "❌ Rez failed or AEPathLink.rsrc is empty"
            cat build/rez_stdout.log
            cat build/rez_stderr.log
            ls -l build/AEPathLink.rsrc || echo "File missing"
            exit 1
          fi
        else
          echo "❌ AEPathLink.r, AEConfig.h, or AE_General.r not found"
          exit 1
        fi

    - name: Build plugin
      working-directory: build
      run: cmake --build . --config Release

    - name: Verify PkgInfo
      working-directory: build
      run: |
        PLUGIN_PATH=$(find . -name "*.plugin" | head -1)
        if [ -n "$PLUGIN_PATH" ]; then
          CONTENTS_PATH="$PLUGIN_PATH/Contents"
          PKGINFO_PATH="$CONTENTS_PATH/PkgInfo"
          if [ -d "$CONTENTS_PATH" ]; then
            echo "✅ Contents dir exists"
          else
            echo "❌ Contents dir missing"
            find "$PLUGIN_PATH" -ls
            exit 1
          fi
          if [ -f "$PKGINFO_PATH" ]; then
            echo "✅ PkgInfo present at $PKGINFO_PATH"
            echo "Contents (hex):"
            xxd "$PKGINFO_PATH"
            echo "Contents (string):"
            cat -v "$PKGINFO_PATH"
          else
            echo "❌ PkgInfo NOT FOUND at $PKGINFO_PATH"
            find "$CONTENTS_PATH" -type f -ls  # List all Contents files for debug
            exit 1
          fi
          echo "Full bundle structure:"
          find "$PLUGIN_PATH" -type d -ls
          find "$PLUGIN_PATH" -type f -ls
        else
          echo "❌ No plugin bundle found"
          exit 1
        fi

    - name: Verify build
      working-directory: build
      run: |
        echo "Build artifacts:"
        find . -name "*.plugin" -exec ls -la {} \;
        find . -name "*.plugin" -exec file {} \;

        PLUGIN_PATH=$(find . -name "*.plugin" | head -1)
        if [ -n "$PLUGIN_PATH" ]; then
            echo "Plugin bundle contents:"
            find "$PLUGIN_PATH" -type f -exec ls -la {} \;

            echo "Executable dependencies:"
            find "$PLUGIN_PATH" -name "AEPathLink" -exec otool -L {} \; || true
        fi

    - name: Verify Bundle Structure
      working-directory: build
      run: |
        PLUGIN_PATH=$(find . -name "*.plugin" | head -1)
        if [ -n "$PLUGIN_PATH" ]; then
          echo "✅ Bundle exists: $PLUGIN_PATH"
          echo "Bundle structure:"
          find "$PLUGIN_PATH" -type f -ls
          echo "PkgInfo contents:"
          xxd "$PLUGIN_PATH/Contents/PkgInfo" || { echo "❌ PkgInfo missing"; exit 1; }
          PKGINFO_SIZE=$(stat -f%z "$PLUGIN_PATH/Contents/PkgInfo")
          if [ "$PKGINFO_SIZE" -eq 8 ]; then
            echo "✅ PkgInfo size: $PKGINFO_SIZE bytes"
          else
            echo "❌ PkgInfo size incorrect: $PKGINFO_SIZE bytes"
            exit 1
          fi
          echo "RSRC size in bundle:"
          ls -l "$PLUGIN_PATH/Contents/Resources/AEPathLink.rsrc" || { echo "❌ RSRC missing"; exit 1; }
          RSRC_SIZE=$(stat -f%z "$PLUGIN_PATH/Contents/Resources/AEPathLink.rsrc")
          if [ "$RSRC_SIZE" -gt 0 ]; then
            echo "✅ RSRC size: $RSRC_SIZE bytes"
            DeRez "$PLUGIN_PATH/Contents/Resources/AEPathLink.rsrc" || echo "⚠️ DeRez failed on bundle RSRC"
          else
            echo "❌ RSRC empty in bundle"
            exit 1
          fi
          echo "Info.plist validation:"
          plutil -lint "$PLUGIN_PATH/Contents/Info.plist" || { echo "❌ Info.plist invalid"; exit 1; }
          echo "Binary info:"
          file "$PLUGIN_PATH/Contents/MacOS/AEPathLink" || { echo "❌ Binary missing"; exit 1; }
        else
          echo "❌ No plugin bundle found"
          exit 1
        fi
    
    - name: Verify PiPL resource
      working-directory: build
      run: |
        if [ ! -f AEPathLink.plugin/Contents/Resources/AEPathLink.rsrc ]; then
          echo "❌ PiPL .rsrc file not found!"
          exit 1
        else
          echo "✅ PiPL .rsrc present"
        fi

    - name: Package for distribution
      working-directory: build
      run: |
        PLUGIN_PATH=$(find . -name "*.plugin" | head -1)
        if [ -n "$PLUGIN_PATH" ]; then
            cd "$(dirname "$PLUGIN_PATH")"
            zip -r "$GITHUB_WORKSPACE/AEPathLink-macOS.zip" "$(basename "$PLUGIN_PATH")"
        else
            echo "No plugin found!"
            exit 1
        fi



    - name: Upload plugin
      uses: actions/upload-artifact@v4
      with:
        name: AEPathLink-macOS
        path: ${{ github.workspace }}/AEPathLink-macOS.zip
        retention-days: 30